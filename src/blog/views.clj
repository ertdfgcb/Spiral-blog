(ns blog.views
  (:use hiccup.core
        blog.config)
  (:import [java.net URLEncoder]))

(defn make-post-name [post & root]
  (let [prestr (if root (first root) *posts-out-path*)]
    (str prestr (URLEncoder/encode (post :title)) ".html")))

(defn make-tag-name [tag]
  (str *tags-out-folder*  (URLEncoder/encode (tag :name)) ".html"))

(defhtml footer []
  [:div#footer
   "Site generated by "
   [:a.footer-link {:href "http://clojure.org/"}
    "Clojure"]
   " and "
   [:a.footer-link {:href "http://github.com/weavejester/hiccup"} "Hiccup"]
   [:br]
   [:a {:href (str "mailto:" *email*)} "Contact me"]])

(defhtml page-prelude [title & body]
  [:link {:rel "stylesheet"
          :type "text/css"
          :href (str "/" *out-css-file*)}]
  [:link {:rel "shortcut icon"
          :type "image/x-icon"
          :href *favicon*}]
  [:link {:href
          "/resources/google-code-prettify/prettify.css"
          :type "text/css"
          :rel "stylesheet"}]
  [:script {:type "text/javascript"
            :src
            "/resources/google-code-prettify/prettify.js"}]
  [:script {:type "text/javascript"
            :src
            "/resources/google-code-prettify/lang-clj.js"}]
  [:title title]
  [:body
   { :onload "prettyPrint()"}
   [:div#content
    body
    (footer)]])

(defhtml author-link []
  [:h3#author-title
   [:a#author-link {:href "/"} *author*]])

(defhtml tag-link [name]
  [:a.tag-link {:href (str "/" *tags-folder* name ".html")} name])

(defhtml tags [tags & intro]
  [:h5#tags
      (if intro (first intro) "More on ")
   (apply str (interpose " " (map tag-link tags)))])

(defhtml make-date [date]
  [:p#date
    [:span#month
     (apply str (take 3 date))]
    [:br]
    [:span#day
     (apply str (drop 3 (take 5 date)))]
    [:br]
    [:span#year
     (apply str (nthnext date 5))]])

(defhtml post-list [post]
  [:div.post-listing
   (make-date (:date post))
   [:br]
   [:h4#post-list-title
    [:a {:href (make-post-name post (str "/" *posts-out-folder*))}
     (:title post)]]
   [:br]
   (tags (:tags post) "This post is about ")])

(defhtml make-link [[text link desc]]
  [:a.link-item {:href link} text]
  [:div#link-desc " - " desc [:br]])

(defhtml home-page [posts]
  ;; posts is a vector of maps {:title "" :tags
  ;; [""] :body ""}
  (page-prelude *title*
   [:h1#author-title
    *title*]
   [:div#info
    [:div#about.info-item
     [:h2
      "About"]
     *about-text*]
    [:div#links.info-item
     [:h2
      "Links"]
     (map make-link (partition 3 *links*))]]
   [:div#posts
    [:h3
     "Posts"]
    (map post-list posts)]))

(defhtml page [post date tag-str]
  (page-prelude (str (:title post) " - " *title*)
   (author-link)
   [:h1
    (:title post)]
   [:div#post
    (if date
      (make-date (:date post)))
    (:body post)]
   (tags (:tags post) tag-str)))

(defhtml post-page [post]
  (page post true "More on "))

(defhtml tag-page [tag]
  (page-prelude (str "Posts about " (:name tag) " - " *title*)
   (author-link)
   [:h1#tag-title
    (:name tag)]
   [:div#posts
    (map post-list (:posts tag))]))

(defhtml links-page []
  (page-prelude (str "Links - " *title*)
   (author-link)
   [:h1
    "Links"
    (map make-link (partition 3 *links*))]))